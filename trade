<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trade Journal</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #2a52be;
            --secondary-color: #6c757d;
            --success-color: #198754;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #0dcaf0;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }
        
        .navbar {
            background-color: var(--primary-color);
        }
        
        .navbar-brand {
            font-weight: bold;
            color: white !important;
        }
        
        .card {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border: none;
            border-radius: 8px;
        }
        
        .card-header {
            background-color: rgba(42, 82, 190, 0.1);
            border-bottom: 1px solid rgba(42, 82, 190, 0.2);
            font-weight: bold;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: #1a42ae;
            border-color: #1a42ae;
        }
        
        .table {
            font-size: 0.9rem;
        }
        
        .table th {
            background-color: rgba(42, 82, 190, 0.1);
        }
        
        .profit {
            color: var(--success-color);
            font-weight: bold;
        }
        
        .loss {
            color: var(--danger-color);
            font-weight: bold;
        }
        
        .badge {
            font-size: 0.8rem;
            padding: 5px 8px;
        }
        
        .badge-buy {
            background-color: rgba(25, 135, 84, 0.2);
            color: var(--success-color);
        }
        
        .badge-sell {
            background-color: rgba(220, 53, 69, 0.2);
            color: var(--danger-color);
        }
        
        .trade-detail-row {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .trade-detail-row:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }
        
        .no-trades-message {
            text-align: center;
            padding: 40px;
            color: var(--secondary-color);
        }
        
        .stats-card {
            border-left: 4px solid var(--primary-color);
            transition: transform 0.2s;
        }
        
        .stats-card:hover {
            transform: translateY(-5px);
        }
        
        .stats-icon {
            font-size: 2rem;
            color: var(--primary-color);
            opacity: 0.7;
        }
        
        .stats-value {
            font-size: 1.5rem;
            font-weight: bold;
        }
        
        .stats-label {
            font-size: 0.9rem;
            color: var(--secondary-color);
        }
        
        .filter-panel {
            background-color: #fff;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .custom-file-upload {
            border: 1px dashed #ccc;
            display: inline-block;
            padding: 30px 20px;
            cursor: pointer;
            width: 100%;
            text-align: center;
            border-radius: 5px;
            transition: all 0.3s;
        }
        
        .custom-file-upload:hover {
            border-color: var(--primary-color);
            background-color: rgba(42, 82, 190, 0.05);
        }
        
        .upload-icon {
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 10px;
        }
        
        .csv-preview {
            max-height: 300px;
            overflow-y: auto;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .table {
                font-size: 0.8rem;
            }
            
            .stats-value {
                font-size: 1.2rem;
            }
            
            .filter-panel {
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="bi bi-graph-up"></i> Trade Journal
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" id="tradesTab">Trades</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="statsTab">Statistics</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="settingsTab">Settings</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Alerts for notifications -->
        <div id="alertArea"></div>

        <!-- Main content area -->
        <div id="mainContent">
            <!-- Trades Tab Content -->
            <div id="tradesContent">
                <div class="row mb-4">
                    <div class="col-md-8">
                        <h3>Your Trades</h3>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#importModal">
                            <i class="bi bi-upload"></i> Import Trades
                        </button>
                        <button class="btn btn-outline-primary ms-2" id="exportBtn">
                            <i class="bi bi-download"></i> Export
                        </button>
                        <button class="btn btn-outline-primary ms-2" id="linkTradesBtn">
                            <i class="bi bi-link"></i> Link Trades
                        </button>
                    </div>
                </div>

                <!-- Filter section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="filter-panel">
                            <div class="row">
                                <div class="col-md-3 mb-2">
                                    <label for="symbolFilter" class="form-label">Symbol</label>
                                    <input type="text" class="form-control" id="symbolFilter" placeholder="Filter by symbol">
                                </div>
                                <div class="col-md-3 mb-2">
                                    <label for="dateRangeFilter" class="form-label">Date Range</label>
                                    <select class="form-select" id="dateRangeFilter">
                                        <option value="all">All Time</option>
                                        <option value="today">Today</option>
                                        <option value="week">This Week</option>
                                        <option value="month">This Month</option>
                                        <option value="quarter">This Quarter</option>
                                        <option value="year">This Year</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-2">
                                    <label for="sideFilter" class="form-label">Trade Type</label>
                                    <select class="form-select" id="sideFilter">
                                        <option value="all">All Trades</option>
                                        <option value="Buy">Buy</option>
                                        <option value="Sell">Sell</option>
                                    </select>
                                </div>
                                <div class="col-md-3 mb-2">
                                    <label for="sortBy" class="form-label">Sort By</label>
                                    <select class="form-select" id="sortBy">
                                        <option value="date-desc">Date (Newest First)</option>
                                        <option value="date-asc">Date (Oldest First)</option>
                                        <option value="symbol-asc">Symbol (A-Z)</option>
                                        <option value="symbol-desc">Symbol (Z-A)</option>
                                        <option value="amount-desc">Amount (Highest First)</option>
                                        <option value="amount-asc">Amount (Lowest First)</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Trades table -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="tradesTable">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Symbol</th>
                                        <th>Type</th>
                                        <th>Qty</th>
                                        <th>Price</th>
                                        <th>Commission</th>
                                        <th>Amount</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="tradesTableBody">
                                    <!-- Trades will be added here dynamically -->
                                </tbody>
                            </table>
                            <div id="noTradesMessage" class="no-trades-message">
                                <i class="bi bi-inbox mb-3" style="font-size: 3rem; opacity: 0.2;"></i>
                                <h5>No trades found</h5>
                                <p>Import your trade confirmations to get started</p>
                            </div>
                        </div>
                        <!-- Pagination -->
                        <nav aria-label="Trades pagination">
                            <ul class="pagination" id="tradesPagination">
                                <!-- Pagination will be added here dynamically -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>

            <!-- Statistics Tab Content -->
            <div id="statsContent" style="display: none;">
                <h3 class="mb-4">Trading Statistics</h3>

                <div class="row">
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div class="stats-value" id="totalTradesCount">0</div>
                                        <div class="stats-label">Total Trades</div>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-arrow-left-right"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div class="stats-value" id="totalVolume">$0</div>
                                        <div class="stats-label">Total Volume</div>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-cash-stack"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div class="stats-value" id="totalCommission">$0</div>
                                        <div class="stats-label">Total Commission</div>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-credit-card"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div class="stats-value" id="uniqueSymbols">0</div>
                                        <div class="stats-label">Unique Symbols</div>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-grid"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 mb-4">
                        <div class="card stats-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div class="stats-value" id="totalPL">$0</div>
                                        <div class="stats-label">Total P/L</div>
                                    </div>
                                    <div class="stats-icon">
                                        <i class="bi bi-graph-up-arrow"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                Trading Activity by Symbol
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="symbolsChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                Trading Volume Over Time
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="volumeChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                Top Traded Symbols
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table" id="topSymbolsTable">
                                        <thead>
                                            <tr>
                                                <th>Symbol</th>
                                                <th>Trades Count</th>
                                                <th>Total Volume</th>
                                                <th>Avg Trade Size</th>
                                                <th>Last Traded</th>
                                            </tr>
                                        </thead>
                                        <tbody id="topSymbolsTableBody">
                                            <!-- Top symbols will be added here dynamically -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Daily Profit/Loss</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Symbol</th>
                                                <th>Buy Qty</th>
                                                <th>Avg Buy Price</th>
                                                <th>Sell Qty</th>
                                                <th>Avg Sell Price</th>
                                                <th>Commissions</th>
                                                <th>P/L</th>
                                            </tr>
                                        </thead>
                                        <tbody id="dailyPLTableBody">
                                            <!-- Daily P/L rows will be added here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Profit/Loss by Symbol</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Symbol</th>
                                                <th>Buy Qty</th>
                                                <th>Avg Buy Price</th>
                                                <th>Sell Qty</th>
                                                <th>Avg Sell Price</th>
                                                <th>Open Position</th>
                                                <th>Commissions</th>
                                                <th>Realized P/L</th>
                                            </tr>
                                        </thead>
                                        <tbody id="symbolPLTableBody">
                                            <!-- Symbol P/L rows will be added here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings Tab Content -->
            <div id="settingsContent" style="display: none;">
                <h3 class="mb-4">Settings</h3>
                
                <div class="card mb-4">
                    <div class="card-header">
                        Display Options
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="currencyFormat" class="form-label">Currency Format</label>
                            <select class="form-select" id="currencyFormat">
                                <option value="USD">USD ($)</option>
                                <option value="EUR">EUR (€)</option>
                                <option value="GBP">GBP (£)</option>
                                <option value="JPY">JPY (¥)</option>
                                <option value="AUD">AUD ($)</option>
                                <option value="CAD">CAD ($)</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="dateFormat" class="form-label">Date Format</label>
                            <select class="form-select" id="dateFormat">
                                <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                                <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                                <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="defaultPageSize" class="form-label">Default Trades per Page</label>
                            <select class="form-select" id="defaultPageSize">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                        <div class="mt-3">
                            <button class="btn btn-primary" id="saveSettingsBtn">Save Settings</button>
                        </div>
                    </div>
                </div>
                
                <div class="card mb-4">
                    <div class="card-header">
                        Data Management
                    </div>
                    <div class="card-body">
                        <button class="btn btn-danger" id="clearDataBtn">
                            <i class="bi bi-trash"></i> Clear All Trade Data
                        </button>
                        <p class="text-muted mt-2">
                            This will permanently delete all your trade data stored in this application.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Import Modal -->
    <div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="importModalLabel">Import Trades</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="importStep1">
                        <div class="mb-3">
                            <label for="brokerSelect" class="form-label">Select your broker:</label>
                            <select class="form-select" id="brokerSelect">
                                <option value="commsec">CommSec</option>
                                <option value="generic">Other / Generic CSV Format</option>
                            </select>
                        </div>
                        <div class="mb-4">
                            <label for="csvFile" class="form-label d-block">Upload your trade confirmation file:</label>
                            <label for="csvFile" class="custom-file-upload">
                                <div class="upload-icon">
                                    <i class="bi bi-cloud-arrow-up"></i>
                                </div>
                                <div>
                                    <strong>Choose a CSV file</strong> or drag it here
                                </div>
                                <div class="text-muted mt-2">
                                    Supported formats: CSV
                                </div>
                            </label>
                            <input type="file" id="csvFile" style="display: none;" accept=".csv">
                        </div>
                        <div id="uploadStatus" style="display: none;" class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            <span id="uploadStatusText">Processing file...</span>
                        </div>
                    </div>

                    <div id="importStep2" style="display: none;">
                        <h5 class="mb-3">Preview and Confirm</h5>
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            We've detected <span id="detectedTradesCount">0</span> trades from your file.
                        </div>
                        <div class="csv-preview mb-3">
                            <table class="table table-sm" id="previewTable">
                                <thead>
                                    <tr id="previewTableHeader">
                                        <!-- Headers will be added dynamically -->
                                    </tr>
                                </thead>
                                <tbody id="previewTableBody">
                                    <!-- Preview rows will be added dynamically -->
                                </tbody>
                            </table>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="skipExistingCheck" checked>
                                <label class="form-check-label" for="skipExistingCheck">
                                    Skip trades that already exist in your journal
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="importStep1Btn">Next</button>
                    <button type="button" class="btn btn-primary" id="importStep2Btn" style="display: none;">Import Trades</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Trade Details Modal -->
    <div class="modal fade" id="tradeDetailsModal" tabindex="-1" aria-labelledby="tradeDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="tradeDetailsModalLabel">Trade Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="tradeDetailsContent">
                        <!-- Trade details will be added here dynamically -->
                    </div>
                    <div class="mb-3 mt-4">
                        <label for="tradeNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="tradeNotes" rows="4" placeholder="Add your notes about this trade..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="deleteTradeBtn">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveTradeNotesBtn">Save Notes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this trade? This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm Clear Data Modal -->
    <div class="modal fade" id="confirmClearDataModal" tabindex="-1" aria-labelledby="confirmClearDataModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmClearDataModalLabel">Confirm Clear All Data</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This will permanently delete all your trade data.
                    </div>
                    <p>
                        Are you absolutely sure you want to clear all your trade data? This action cannot be undone.
                    </p>
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="confirmClearCheck">
                        <label class="form-check-label" for="confirmClearCheck">
                            I understand that all my trade data will be permanently deleted
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmClearDataBtn" disabled>Clear All Data</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        // Main application JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the application
            const app = new TradeJournal();
            app.init();
        });

        class TradeJournal {
            constructor() {
                // Application settings
                this.settings = {
                    currencyFormat: 'AUD',
                    dateFormat: 'DD/MM/YYYY',
                    defaultPageSize: 25
                };
                
                // Trade data
                this.trades = [];
                
                // Pagination
                this.currentPage = 1;
                this.pageSize = 25;
                
                // Filters
                this.filters = {
                    symbol: '',
                    dateRange: 'all',
                    side: 'all',
                    sortBy: 'date-desc'
                };
                
                // Import data
                this.importData = {
                    rawData: null,
                    mappedData: null,
                    broker: 'commsec'
                };
                
                // Current trade being viewed
                this.currentTradeId = null;
                
                // Charts
                this.charts = {
                    symbols: null,
                    volume: null
                };
                
                // Bootstrap Modal instances
                this.modals = {};
            }
            
            init() {
                // Load settings from localStorage
                this.loadSettings();
                
                // Load trades from localStorage
                this.loadTrades();
                
                // Initialize UI elements
                this.initUI();
                
                // Initialize event listeners
                this.initEventListeners();
                
                // Update the UI with the loaded data
                this.updateUI();
            }
            
            loadSettings() {
                const savedSettings = localStorage.getItem('tradeJournalSettings');
                if (savedSettings) {
                    this.settings = JSON.parse(savedSettings);
                }
                
                // Apply settings to UI
                document.getElementById('currencyFormat').value = this.settings.currencyFormat;
                document.getElementById('dateFormat').value = this.settings.dateFormat;
                document.getElementById('defaultPageSize').value = this.settings.defaultPageSize;
                
                // Set page size from settings
                this.pageSize = parseInt(this.settings.defaultPageSize);
            }
            
            saveSettings() {
                // Update settings from UI
                this.settings.currencyFormat = document.getElementById('currencyFormat').value;
                this.settings.dateFormat = document.getElementById('dateFormat').value;
                this.settings.defaultPageSize = document.getElementById('defaultPageSize').value;
                
                // Save to localStorage
                localStorage.setItem('tradeJournalSettings', JSON.stringify(this.settings));
                
                // Update page size
                this.pageSize = parseInt(this.settings.defaultPageSize);
                
                // Show success message
                this.showAlert('Settings saved successfully', 'success');
                
                // Refresh UI
                this.renderTrades();
                this.updateStats();
            }
            
            loadTrades() {
                const savedTrades = localStorage.getItem('tradeJournalData');
                if (savedTrades) {
                    this.trades = JSON.parse(savedTrades);
                }
            }
            
            saveTrades() {
                localStorage.setItem('tradeJournalData', JSON.stringify(this.trades));
            }
            
            initUI() {
                // Initialize Bootstrap modals
                this.modals.importModal = new bootstrap.Modal(document.getElementById('importModal'));
                this.modals.tradeDetailsModal = new bootstrap.Modal(document.getElementById('tradeDetailsModal'));
                this.modals.confirmDeleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
                this.modals.confirmClearDataModal = new bootstrap.Modal(document.getElementById('confirmClearDataModal'));
                
                // Set active tab
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.classList.remove('active');
                });
                document.getElementById('tradesTab').classList.add('active');
                
                // Show trades content
                document.getElementById('tradesContent').style.display = 'block';
                document.getElementById('statsContent').style.display = 'none';
                document.getElementById('settingsContent').style.display = 'none';
            }
            
            initEventListeners() {
                // Tab navigation
                document.getElementById('tradesTab').addEventListener('click', (e) => {
                    e.preventDefault();
                    this.switchTab('trades');
                });
                
                document.getElementById('statsTab').addEventListener('click', (e) => {
                    e.preventDefault();
                    this.switchTab('stats');
                });
                
                document.getElementById('settingsTab').addEventListener('click', (e) => {
                    e.preventDefault();
                    this.switchTab('settings');
                });
                
                // Filter and sort events
                document.getElementById('symbolFilter').addEventListener('input', () => {
                    this.filters.symbol = document.getElementById('symbolFilter').value.trim().toUpperCase();
                    this.currentPage = 1;
                    this.renderTrades();
                });
                
                document.getElementById('dateRangeFilter').addEventListener('change', () => {
                    this.filters.dateRange = document.getElementById('dateRangeFilter').value;
                    this.currentPage = 1;
                    this.renderTrades();
                });
                
                document.getElementById('sideFilter').addEventListener('change', () => {
                    this.filters.side = document.getElementById('sideFilter').value;
                    this.currentPage = 1;
                    this.renderTrades();
                });
                
                document.getElementById('sortBy').addEventListener('change', () => {
                    this.filters.sortBy = document.getElementById('sortBy').value;
                    this.renderTrades();
                });
                
                // Import events
                document.getElementById('csvFile').addEventListener('change', (e) => {
                    if (e.target.files.length > 0) {
                        this.handleFileUpload(e.target.files[0]);
                    }
                });
                
                document.getElementById('importStep1Btn').addEventListener('click', () => {
                    this.processImportStep1();
                });
                
                document.getElementById('importStep2Btn').addEventListener('click', () => {
                    this.processImportStep2();
                });
                
                document.getElementById('brokerSelect').addEventListener('change', () => {
                    this.importData.broker = document.getElementById('brokerSelect').value;
                });
                
                // Settings events
                document.getElementById('saveSettingsBtn').addEventListener('click', () => {
                    this.saveSettings();
                });
                
                // Export trades
                document.getElementById('exportBtn').addEventListener('click', () => {
                    this.exportTrades();
                });
                
                // Link trades
                document.getElementById('linkTradesBtn').addEventListener('click', () => {
                    this.linkTrades();
                });
                
                // Trade details modal events
                document.getElementById('saveTradeNotesBtn').addEventListener('click', () => {
                    this.saveTradeNotes();
                });
                
                document.getElementById('deleteTradeBtn').addEventListener('click', () => {
                    this.modals.tradeDetailsModal.hide();
                    this.modals.confirmDeleteModal.show();
                });
                
                document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
                    this.deleteTrade();
                    this.modals.confirmDeleteModal.hide();
                });
                
                // Clear data events
                document.getElementById('clearDataBtn').addEventListener('click', () => {
                    this.modals.confirmClearDataModal.show();
                });
                
                document.getElementById('confirmClearCheck').addEventListener('change', (e) => {
                    document.getElementById('confirmClearDataBtn').disabled = !e.target.checked;
                });
                
                document.getElementById('confirmClearDataBtn').addEventListener('click', () => {
                    this.clearAllData();
                    this.modals.confirmClearDataModal.hide();
                });
            }
            
            updateUI() {
                this.renderTrades();
                this.updateStats();
            }
            
            switchTab(tab) {
                // Update active tab
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.classList.remove('active');
                });
                
                document.getElementById(`${tab}Tab`).classList.add('active');
                
                // Show/hide content
                document.getElementById('tradesContent').style.display = tab === 'trades' ? 'block' : 'none';
                document.getElementById('statsContent').style.display = tab === 'stats' ? 'block' : 'none';
                document.getElementById('settingsContent').style.display = tab === 'settings' ? 'block' : 'none';
                
                // Update charts if on stats tab
                if (tab === 'stats') {
                    this.renderCharts();
                }
            }
            
            // TRADE RENDERING FUNCTIONS
            
            renderTrades() {
                const tableBody = document.getElementById('tradesTableBody');
                const noTradesMessage = document.getElementById('noTradesMessage');
                
                // Apply filters and sort
                const filteredTrades = this.getFilteredTrades();
                
                // Check if we have trades
                if (filteredTrades.length === 0) {
                    tableBody.innerHTML = '';
                    noTradesMessage.style.display = 'block';
                    document.getElementById('tradesPagination').innerHTML = '';
                    return;
                }
                
                // Hide no trades message
                noTradesMessage.style.display = 'none';
                
                // Paginate
                const startIndex = (this.currentPage - 1) * this.pageSize;
                const endIndex = startIndex + this.pageSize;
                const paginatedTrades = filteredTrades.slice(startIndex, endIndex);
                
                // Clear the table
                tableBody.innerHTML = '';
                
                // Add rows
                paginatedTrades.forEach(trade => {
                    const row = document.createElement('tr');
                    row.classList.add('trade-detail-row');
                    row.dataset.tradeId = trade.id;
                    
                    // Format date based on settings
                    const formattedDate = this.formatDate(trade.date);
                    
                    // Calculate amount
                    const amount = trade.side === 'Buy' 
                        ? -1 * (trade.quantity * trade.price + trade.commission)
                        : (trade.quantity * trade.price - trade.commission);
                    
                    // Format amount with currency
                    const formattedAmount = this.formatCurrency(amount);
                    
                    // Create row content
                    row.innerHTML = `
                        <td>${formattedDate}</td>
                        <td>${trade.symbol}</td>
                        <td>
                            <span class="badge ${trade.side === 'Buy' ? 'badge-buy' : 'badge-sell'}">
                                ${trade.side}
                            </span>
                        </td>
                        <td>${trade.quantity.toLocaleString()}</td>
                        <td>${this.formatCurrency(trade.price)}</td>
                        <td>${this.formatCurrency(trade.commission)}</td>
                        <td class="${amount >= 0 ? 'profit' : 'loss'}">${formattedAmount}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-secondary link-trade-btn me-1" title="Link Trade" data-trade-id="${trade.id}">
                                <i class="bi bi-link"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary view-trade-btn" data-trade-id="${trade.id}">
                                <i class="bi bi-eye"></i>
                            </button>
                        </td>
                    `;
                    
                    // Add event listener to row for viewing trade details
                    row.addEventListener('click', (e) => {
                        if (!e.target.closest('.view-trade-btn') && !e.target.closest('.link-trade-btn')) {
                            this.showTradeDetails(trade.id);
                        }
                    });
                    
                    // Add event listener to view button
                    const viewBtn = row.querySelector('.view-trade-btn');
                    viewBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        this.showTradeDetails(trade.id);
                    });
                    
                    // Add event listener to link button
                    const linkBtn = row.querySelector('.link-trade-btn');
                    linkBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        this.linkTrades(trade.symbol);
                    });
                    
                    tableBody.appendChild(row);
                });
                
                // Render pagination
                this.renderPagination(filteredTrades.length);
            }
            
            getFilteredTrades() {
                let filtered = [...this.trades];
                
                // Filter by symbol
                if (this.filters.symbol) {
                    filtered = filtered.filter(trade => 
                        trade.symbol.includes(this.filters.symbol)
                    );
                }
                
                // Filter by side
                if (this.filters.side !== 'all') {
                    filtered = filtered.filter(trade => 
                        trade.side === this.filters.side
                    );
                }
                
                // Filter by date range
                if (this.filters.dateRange !== 'all') {
                    const now = new Date();
                    let startDate;
                    
                    switch (this.filters.dateRange) {
                        case 'today':
                            startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                            break;
                        case 'week':
                            startDate = new Date(now);
                            startDate.setDate(now.getDate() - now.getDay());
                            break;
                        case 'month':
                            startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                            break;
                        case 'quarter':
                            const quarter = Math.floor(now.getMonth() / 3);
                            startDate = new Date(now.getFullYear(), quarter * 3, 1);
                            break;
                        case 'year':
                            startDate = new Date(now.getFullYear(), 0, 1);
                            break;
                    }
                    
                    filtered = filtered.filter(trade => {
                        const tradeDate = new Date(trade.date);
                        return tradeDate >= startDate;
                    });
                }
                
                // Sort trades
                switch (this.filters.sortBy) {
                    case 'date-desc':
                        filtered.sort((a, b) => new Date(b.date) - new Date(a.date));
                        break;
                    case 'date-asc':
                        filtered.sort((a, b) => new Date(a.date) - new Date(b.date));
                        break;
                    case 'symbol-asc':
                        filtered.sort((a, b) => a.symbol.localeCompare(b.symbol));
                        break;
                    case 'symbol-desc':
                        filtered.sort((a, b) => b.symbol.localeCompare(a.symbol));
                        break;
                    case 'amount-desc':
                        filtered.sort((a, b) => {
                            const amountA = a.side === 'Buy' 
                                ? -1 * (a.quantity * a.price + a.commission)
                                : (a.quantity * a.price - a.commission);
                            const amountB = b.side === 'Buy' 
                                ? -1 * (b.quantity * b.price + b.commission)
                                : (b.quantity * b.price - b.commission);
                            return amountB - amountA;
                        });
                        break;
                    case 'amount-asc':
                        filtered.sort((a, b) => {
                            const amountA = a.side === 'Buy' 
                                ? -1 * (a.quantity * a.price + a.commission)
                                : (a.quantity * a.price - a.commission);
                            const amountB = b.side === 'Buy' 
                                ? -1 * (b.quantity * b.price + b.commission)
                                : (b.quantity * b.price - b.commission);
                            return amountA - amountB;
                        });
                        break;
                }
                
                return filtered;
            }
            
            renderPagination(totalItems) {
                const paginationElement = document.getElementById('tradesPagination');
                const totalPages = Math.ceil(totalItems / this.pageSize);
                
                if (totalPages <= 1) {
                    paginationElement.innerHTML = '';
                    return;
                }
                
                let paginationHTML = '';
                
                // Previous button
                paginationHTML += `
                    <li class="page-item ${this.currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${this.currentPage - 1}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                `;
                
                // Page numbers
                const maxVisiblePages = 5;
                let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                
                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }
                
                for (let i = startPage; i <= endPage; i++) {
                    paginationHTML += `
                        <li class="page-item ${i === this.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }
                
                // Next button
                paginationHTML += `
                    <li class="page-item ${this.currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${this.currentPage + 1}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                `;
                
                paginationElement.innerHTML = paginationHTML;
                
                // Add event listeners to pagination links
                paginationElement.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        if (!link.parentElement.classList.contains('disabled')) {
                            this.currentPage = parseInt(link.dataset.page);
                            this.renderTrades();
                        }
                    });
                });
            }
            
            // TRADE DETAILS FUNCTIONS
            
            showTradeDetails(tradeId) {
                this.currentTradeId = tradeId;
                const trade = this.trades.find(t => t.id === tradeId);
                
                if (!trade) return;
                
                const detailsContent = document.getElementById('tradeDetailsContent');
                const tradeDate = this.formatDate(trade.date);
                const amount = trade.side === 'Buy' 
                    ? -1 * (trade.quantity * trade.price + trade.commission)
                    : (trade.quantity * trade.price - trade.commission);
                
                detailsContent.innerHTML = `
                    <div class="mb-3">
                        <div class="badge ${trade.side === 'Buy' ? 'badge-buy' : 'badge-sell'} mb-2">
                            ${trade.side}
                        </div>
                        <h4>${trade.symbol}</h4>
                        <div class="text-muted">${tradeDate}</div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <small class="text-muted">Quantity</small>
                            <div>${trade.quantity.toLocaleString()}</div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Price</small>
                            <div>${this.formatCurrency(trade.price)}</div>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <small class="text-muted">Commission</small>
                            <div>${this.formatCurrency(trade.commission)}</div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Total Amount</small>
                            <div class="${amount >= 0 ? 'profit' : 'loss'}">${this.formatCurrency(amount)}</div>
                        </div>
                    </div>
                    
                    ${trade.orderNumber ? `
                    <div class="row mb-3">
                        <div class="col-12">
                            <small class="text-muted">Order Number</small>
                            <div>${trade.orderNumber}</div>
                        </div>
                    </div>
                    ` : ''}
                    
                    ${trade.linkedTradeIds && trade.linkedTradeIds.length > 0 ? `
                    <div class="row mb-3">
                        <div class="col-12">
                            <small class="text-muted">Linked Trades</small>
                            <div>${trade.linkedTradeIds.length} linked trade(s)</div>
                        </div>
                    </div>
                    ` : ''}
                `;
                
                // Set notes
                document.getElementById('tradeNotes').value = trade.notes || '';
                
                // Update modal title
                document.getElementById('tradeDetailsModalLabel').textContent = 
                    `${trade.side} ${trade.symbol} - ${tradeDate}`;
                
                // Show modal
                this.modals.tradeDetailsModal.show();
            }
            
            saveTradeNotes() {
                const notes = document.getElementById('tradeNotes').value;
                
                // Find trade and update notes
                const tradeIndex = this.trades.findIndex(t => t.id === this.currentTradeId);
                
                if (tradeIndex !== -1) {
                    this.trades[tradeIndex].notes = notes;
                    this.saveTrades();
                    this.showAlert('Trade notes saved', 'success');
                    this.modals.tradeDetailsModal.hide();
                }
            }
            
            deleteTrade() {
                // Find and remove trade
                this.trades = this.trades.filter(t => t.id !== this.currentTradeId);
                this.saveTrades();
                this.showAlert('Trade deleted successfully', 'success');
                
                // Reset current trade ID
                this.currentTradeId = null;
                
                // Update UI
                this.renderTrades();
                this.updateStats();
            }
            
            // TRADE LINKING FUNCTIONS
            
            linkTrades(initialSymbol = null) {
                // Create a modal for linking trades
                const modalHtml = `
                <div class="modal fade" id="linkTradesModal" tabindex="-1" aria-labelledby="linkTradesModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="linkTradesModalLabel">Link Trades</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Symbol</label>
                                        <select class="form-select" id="linkSymbolSelect">
                                            <option value="">Select Symbol</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Buy Trades</h6>
                                        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                                            <table class="table table-sm">
                                                <thead>
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>Qty</th>
                                                        <th>Price</th>
                                                        <th>Select</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="buyTradesTable"></tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Sell Trades</h6>
                                        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                                            <table class="table table-sm">
                                                <thead>
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>Qty</th>
                                                        <th>Price</th>
                                                        <th>Select</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="sellTradesTable"></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                <div class="alert alert-info mt-3">
                                    Select buy and sell trades to link together. The relationship will be used to calculate profit/loss.
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" id="saveLinkBtn">Link Selected Trades</button>
                            </div>
                        </div>
                    </div>
                </div>
                `;
                
                // Append modal to body if it doesn't exist
                if (!document.getElementById('linkTradesModal')) {
                    document.body.insertAdjacentHTML('beforeend', modalHtml);
                }
                
                // Initialize modal
                this.modals.linkTradesModal = new bootstrap.Modal(document.getElementById('linkTradesModal'));
                
                // Populate symbols dropdown
                const symbolSelect = document.getElementById('linkSymbolSelect');
                symbolSelect.innerHTML = '<option value="">Select Symbol</option>';
                
                // Get unique symbols from trades
                const symbols = [...new Set(this.trades.map(t => t.symbol))].sort();
                
                symbols.forEach(symbol => {
                    const option = document.createElement('option');
                    option.value = symbol;
                    option.textContent = symbol;
                    symbolSelect.appendChild(option);
                });
                
                // Add event listener to symbol select
                symbolSelect.addEventListener('change', () => {
                    this.populateLinkTables(symbolSelect.value);
                });
                
                // Add event listener to save link button
                document.getElementById('saveLinkBtn').addEventListener('click', () => {
                    this.saveTradeLinks();
                });
                
                // Set initial symbol if provided
                if (initialSymbol && symbols.includes(initialSymbol)) {
                    symbolSelect.value = initialSymbol;
                    this.populateLinkTables(initialSymbol);
                }
                
                // Show the modal
                this.modals.linkTradesModal.show();
            }
            
            // Populate the buy and sell tables based on selected symbol
            populateLinkTables(symbol) {
                const buyTable = document.getElementById('buyTradesTable');
                const sellTable = document.getElementById('sellTradesTable');
                
                // Clear tables
                buyTable.innerHTML = '';
                sellTable.innerHTML = '';
                
                if (!symbol) return;
                
                // Filter trades by the selected symbol
                const symbolTrades = this.trades.filter(t => t.symbol === symbol);
                
                // Separate buy and sell trades
                const buyTrades = symbolTrades.filter(t => t.side === 'Buy');
                const sellTrades = symbolTrades.filter(t => t.side === 'Sell');
                
                // Populate buy trades table
                buyTrades.forEach(trade => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${this.formatDate(trade.date)}</td>
                        <td>${trade.quantity.toLocaleString()}</td>
                        <td>${this.formatCurrency(trade.price)}</td>
                        <td>
                            <div class="form-check">
                                <input class="form-check-input buy-trade-checkbox" type="checkbox" value="${trade.id}" 
                                    ${trade.linkedTradeIds && trade.linkedTradeIds.length > 0 ? 'checked' : ''}>
                            </div>
                        </td>
                    `;
                    buyTable.appendChild(row);
                });
                
                // Populate sell trades table
                sellTrades.forEach(trade => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${this.formatDate(trade.date)}</td>
                        <td>${trade.quantity.toLocaleString()}</td>
                        <td>${this.formatCurrency(trade.price)}</td>
                        <td>
                            <div class="form-check">
                                <input class="form-check-input sell-trade-checkbox" type="checkbox" value="${trade.id}"
                                    ${trade.linkedTradeIds && trade.linkedTradeIds.length > 0 ? 'checked' : ''}>
                            </div>
                        </td>
                    `;
                    sellTable.appendChild(row);
                });
            }
            
            // Save the links between buy and sell trades
            saveTradeLinks() {
                // Get selected buy and sell trades
                const selectedBuyTradeIds = Array.from(document.querySelectorAll('.buy-trade-checkbox:checked')).map(cb => cb.value);
                const selectedSellTradeIds = Array.from(document.querySelectorAll('.sell-trade-checkbox:checked')).map(cb => cb.value);
                
                if (selectedBuyTradeIds.length === 0 || selectedSellTradeIds.length === 0) {
                    this.showAlert('Please select at least one buy trade and one sell trade to link', 'warning');
                    return;
                }
                
                // Clear existing links for selected trades
                this.trades.forEach(trade => {
                    if (selectedBuyTradeIds.includes(trade.id) || selectedSellTradeIds.includes(trade.id)) {
                        trade.linkedTradeIds = [];
                    }
                });
                
                // Create new links
                this.trades.forEach(trade => {
                    if (selectedBuyTradeIds.includes(trade.id)) {
                        trade.linkedTradeIds = [...selectedSellTradeIds];
                    } else if (selectedSellTradeIds.includes(trade.id)) {
                        trade.linkedTradeIds = [...selectedBuyTradeIds];
                    }
                });
                
                // Save trades
                this.saveTrades();
                
                // Update UI
                this.updateUI();
                
                // Close modal
                this.modals.linkTradesModal.hide();
                
                // Show success message
                this.show
Alert('Trades linked successfully', 'success');
            }
            
            // CSV IMPORT FUNCTIONS
            
            handleFileUpload(file) {
                if (!file) return;
                
                const uploadStatus = document.getElementById('uploadStatus');
                const uploadStatusText = document.getElementById('uploadStatusText');
                
                uploadStatus.style.display = 'block';
                uploadStatusText.textContent = 'Reading file...';
                
                Papa.parse(file, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true,
                    complete: (results) => {
                        if (results.errors && results.errors.length > 0) {
                            uploadStatusText.textContent = `Error parsing CSV: ${results.errors[0].message}`;
                            uploadStatus.className = 'alert alert-danger';
                            return;
                        }
                        
                        if (!results.data || results.data.length === 0) {
                            uploadStatusText.textContent = 'No data found in the CSV file';
                            uploadStatus.className = 'alert alert-warning';
                            return;
                        }
                        
                        // Store raw data
                        this.importData.rawData = results.data;
                        this.importData.broker = document.getElementById('brokerSelect').value;
                        
                        uploadStatusText.textContent = `Found ${results.data.length} records in the file`;
                        uploadStatus.className = 'alert alert-success';
                        
                        // Auto-proceed to next step
                        this.processImportStep1();
                    },
                    error: (error) => {
                        uploadStatusText.textContent = `Error reading file: ${error.message}`;
                        uploadStatus.className = 'alert alert-danger';
                    }
                });
            }
            
            processImportStep1() {
                if (!this.importData.rawData || this.importData.rawData.length === 0) {
                    this.showAlert('Please upload a CSV file first', 'danger');
                    return;
                }
                
                // Map data according to broker
                this.importData.mappedData = this.mapTradeData(
                    this.importData.rawData, 
                    this.importData.broker
                );
                
                // Move to step 2
                document.getElementById('importStep1').style.display = 'none';
                document.getElementById('importStep2').style.display = 'block';
                document.getElementById('importStep1Btn').style.display = 'none';
                document.getElementById('importStep2Btn').style.display = 'inline-block';
                
                // Update counts
                document.getElementById('detectedTradesCount').textContent = this.importData.mappedData.length;
                
                // Render preview table
                this.renderPreviewTable();
            }
            
            processImportStep2() {
                if (!this.importData.mappedData || this.importData.mappedData.length === 0) {
                    this.showAlert('No valid trades to import', 'danger');
                    return;
                }
                
                const skipExisting = document.getElementById('skipExistingCheck').checked;
                let importCount = 0;
                let skipCount = 0;
                
                // Process each mapped trade
                this.importData.mappedData.forEach(trade => {
                    // Generate unique ID based on details
                    const tradeId = this.generateTradeId(trade);
                    
                    // Check if trade already exists
                    const exists = this.trades.some(t => 
                        this.generateTradeId(t) === tradeId
                    );
                    
                    if (exists && skipExisting) {
                        skipCount++;
                        return;
                    }
                    
                    // Add trade to the journal
                    this.trades.push({
                        ...trade,
                        id: tradeId,
                        notes: '',
                        linkedTradeIds: []
                    });
                    
                    importCount++;
                });
                
                // Save trades
                this.saveTrades();
                
                // Reset import data
                this.importData = {
                    rawData: null,
                    mappedData: null,
                    broker: 'commsec'
                };
                
                // Reset import modal
                document.getElementById('importStep1').style.display = 'block';
                document.getElementById('importStep2').style.display = 'none';
                document.getElementById('importStep1Btn').style.display = 'inline-block';
                document.getElementById('importStep2Btn').style.display = 'none';
                document.getElementById('csvFile').value = '';
                document.getElementById('uploadStatus').style.display = 'none';
                
                // Hide modal
                this.modals.importModal.hide();
                
                // Show success message
                this.showAlert(`Successfully imported ${importCount} trades${skipCount > 0 ? `, skipped ${skipCount} existing trades` : ''}`, 'success');
                
                // Update UI
                this.updateUI();
            }
            
            mapTradeData(rawData, broker) {
                const mappedTrades = [];
                
                if (broker === 'commsec') {
                    // Map CommSec format
                    rawData.forEach(row => {
                        // Skip empty rows or rows without essential data
                        if (!row['Trade Date'] || !row['Security'] || !row['Buy/ Sell']) {
                            return;
                        }
                        
                        const side = row['Buy/ Sell'] === 'B' || row['Buy/ Sell'] === 'Buy' ? 'Buy' : 'Sell';
                        
                        mappedTrades.push({
                            date: row['Trade Date'],
                            symbol: row['Security'],
                            side: side,
                            quantity: row['Units'] || 0,
                            price: row['Average Price ($)'] || 0,
                            commission: row['Brokerage (inc GST.)'] || 0,
                            orderNumber: row['Order Number'] || ''
                        });
                    });
                } else {
                    // Generic format - try to detect columns
                    rawData.forEach(row => {
                        // Try to find required fields
                        let date = null;
                        let symbol = null;
                        let side = null;
                        let quantity = 0;
                        let price = 0;
                        let commission = 0;
                        let orderNumber = '';
                        
                        // Look for date
                        for (const key in row) {
                            if (key.toLowerCase().includes('date') && !key.toLowerCase().includes('settlement')) {
                                date = row[key];
                                break;
                            }
                        }
                        
                        // Look for symbol
                        for (const key in row) {
                            if (key.toLowerCase().includes('symbol') || 
                                key.toLowerCase().includes('security') || 
                                key.toLowerCase().includes('ticker')) {
                                symbol = row[key];
                                break;
                            }
                        }
                        
                        // Look for side (Buy/Sell)
                        for (const key in row) {
                            if (key.toLowerCase().includes('side') || 
                                key.toLowerCase().includes('buy') || 
                                key.toLowerCase().includes('type')) {
                                const value = row[key];
                                if (value === 'B' || value === 'Buy' || value === 'BUY' || value === 'buy') {
                                    side = 'Buy';
                                } else if (value === 'S' || value === 'Sell' || value === 'SELL' || value === 'sell') {
                                    side = 'Sell';
                                } else {
                                    side = value;
                                }
                                break;
                            }
                        }
                        
                        // Look for quantity
                        for (const key in row) {
                            if (key.toLowerCase().includes('quantity') || 
                                key.toLowerCase().includes('unit') || 
                                key.toLowerCase().includes('qty') ||
                                key.toLowerCase().includes('shares')) {
                                quantity = row[key] || 0;
                                break;
                            }
                        }
                        
                        // Look for price
                        for (const key in row) {
                            if (key.toLowerCase().includes('price') && !key.toLowerCase().includes('average price ($)')) {
                                price = row[key] || 0;
                                break;
                            }
                        }
                        
                        // Try to find Average Price ($) specifically
                        for (const key in row) {
                            if (key === 'Average Price ($)') {
                                price = row[key] || 0;
                                break;
                            }
                        }
                        
                        // Look for commission
                        for (const key in row) {
                            if (key.toLowerCase().includes('commission') || 
                                key.toLowerCase().includes('brokerage') || 
                                key.toLowerCase().includes('fee')) {
                                commission = row[key] || 0;
                                break;
                            }
                        }
                        
                        // Look for order number
                        for (const key in row) {
                            if (key.toLowerCase().includes('order')) {
                                orderNumber = row[key] || '';
                                break;
                            }
                        }
                        
                        // Skip if required fields are missing
                        if (!date || !symbol || !side) {
                            return;
                        }
                        
                        mappedTrades.push({
                            date,
                            symbol,
                            side,
                            quantity,
                            price,
                            commission,
                            orderNumber
                        });
                    });
                }
                
                return mappedTrades;
            }
            
            renderPreviewTable() {
                if (!this.importData.mappedData || this.importData.mappedData.length === 0) {
                    return;
                }
                
                const headerRow = document.getElementById('previewTableHeader');
                const tableBody = document.getElementById('previewTableBody');
                
                // Set headers
                headerRow.innerHTML = `
                    <th>Date</th>
                    <th>Symbol</th>
                    <th>Side</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Commission</th>
                `;
                
                // Clear previous rows
                tableBody.innerHTML = '';
                
                // Add preview rows (max 10)
                const previewData = this.importData.mappedData.slice(0, 10);
                
                previewData.forEach(trade => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${trade.date}</td>
                        <td>${trade.symbol}</td>
                        <td>${trade.side}</td>
                        <td>${trade.quantity}</td>
                        <td>${this.formatCurrency(trade.price)}</td>
                        <td>${this.formatCurrency(trade.commission)}</td>
                    `;
                    tableBody.appendChild(row);
                });
            }
            
            generateTradeId(trade) {
                // Create a unique ID based on trade details
                return `${trade.date}_${trade.symbol}_${trade.side}_${trade.quantity}_${trade.price}`;
            }
            
            // STATISTICS FUNCTIONS
            
            updateStats() {
                if (this.trades.length === 0) {
                    document.getElementById('totalTradesCount').textContent = '0';
                    document.getElementById('totalVolume').textContent = this.formatCurrency(0);
                    document.getElementById('totalCommission').textContent = this.formatCurrency(0);
                    document.getElementById('uniqueSymbols').textContent = '0';
                    document.getElementById('totalPL').textContent = this.formatCurrency(0);
                    document.getElementById('topSymbolsTableBody').innerHTML = '';
                    document.getElementById('dailyPLTableBody').innerHTML = '';
                    document.getElementById('symbolPLTableBody').innerHTML = '';
                    return;
                }
                
                // Calculate basic statistics
                const stats = this.calculateStats();
                
                // Calculate daily P/L
                const dailyPL = this.calculateDailyProfitLoss();
                
                // Calculate symbol P/L
                const symbolPL = this.calculateSymbolProfitLoss();
                
                // Update UI
                document.getElementById('totalTradesCount').textContent = stats.totalTrades;
                document.getElementById('totalVolume').textContent = this.formatCurrency(stats.totalVolume);
                document.getElementById('totalCommission').textContent = this.formatCurrency(stats.totalCommission);
                document.getElementById('uniqueSymbols').textContent = stats.uniqueSymbols;
                document.getElementById('totalPL').textContent = this.formatCurrency(symbolPL.totalPL);
                
                // Render top symbols table
                this.renderTopSymbolsTable(stats.symbolStats);
                
                // Render daily P/L table
                this.renderDailyPLTable(dailyPL);
                
                // Render symbol P/L table
                this.renderSymbolPLTable(symbolPL.symbols);
            }
            
            calculateStats() {
                const stats = {
                    totalTrades: this.trades.length,
                    totalVolume: 0,
                    totalCommission: 0,
                    uniqueSymbols: 0,
                    symbolStats: {}
                };
                
                // Calculate totals
                this.trades.forEach(trade => {
                    // Calculate volume
                    const volume = trade.quantity * trade.price;
                    stats.totalVolume += volume;
                    
                    // Add commission
                    stats.totalCommission += trade.commission;
                    
                    // Track symbols
                    if (!stats.symbolStats[trade.symbol]) {
                        stats.symbolStats[trade.symbol] = {
                            count: 0,
                            volume: 0,
                            lastTradeDate: null
                        };
                    }
                    
                    stats.symbolStats[trade.symbol].count++;
                    stats.symbolStats[trade.symbol].volume += volume;
                    
                    // Track last trade date
                    const tradeDate = new Date(trade.date);
                    if (!stats.symbolStats[trade.symbol].lastTradeDate || 
                        tradeDate > new Date(stats.symbolStats[trade.symbol].lastTradeDate)) {
                        stats.symbolStats[trade.symbol].lastTradeDate = trade.date;
                    }
                });
                
                // Count unique symbols
                stats.uniqueSymbols = Object.keys(stats.symbolStats).length;
                
                return stats;
            }
            
            renderTopSymbolsTable(symbolStats) {
                const tableBody = document.getElementById('topSymbolsTableBody');
                tableBody.innerHTML = '';
                
                // Sort symbols by volume
                const sortedSymbols = Object.entries(symbolStats)
                    .sort(([, a], [, b]) => b.volume - a.volume)
                    .slice(0, 10); // Take top 10
                
                sortedSymbols.forEach(([symbol, data]) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${symbol}</td>
                        <td>${data.count}</td>
                        <td>${this.formatCurrency(data.volume)}</td>
                        <td>${this.formatCurrency(data.volume / data.count)}</td>
                        <td>${this.formatDate(data.lastTradeDate)}</td>
                    `;
                    tableBody.appendChild(row);
                });
            }
            
            // Calculate daily P/L
            calculateDailyProfitLoss() {
                const dailyPL = {};
                
                // Group trades by date and symbol
                this.trades.forEach(trade => {
                    const date = trade.date;
                    const symbol = trade.symbol;
                    const key = `${date}_${symbol}`;
                    
                    if (!dailyPL[key]) {
                        dailyPL[key] = {
                            date,
                            symbol,
                            buyQuantity: 0,
                            buyValue: 0,
                            sellQuantity: 0,
                            sellValue: 0,
                            commission: 0
                        };
                    }
                    
                    // Add trade data to the daily summary
                    if (trade.side === 'Buy') {
                        dailyPL[key].buyQuantity += trade.quantity;
                        dailyPL[key].buyValue += trade.quantity * trade.price;
                    } else if (trade.side === 'Sell') {
                        dailyPL[key].sellQuantity += trade.quantity;
                        dailyPL[key].sellValue += trade.quantity * trade.price;
                    }
                    
                    dailyPL[key].commission += trade.commission;
                });
                
                // Calculate profit/loss for each day
                const dailyResults = Object.values(dailyPL).map(day => {
                    // Calculate average prices
                    const avgBuyPrice = day.buyQuantity > 0 ? day.buyValue / day.buyQuantity : 0;
                    const avgSellPrice = day.sellQuantity > 0 ? day.sellValue / day.sellQuantity : 0;
                    
                    // Calculate profit/loss
                    let profitLoss = 0;
                    
                    // If we have both buys and sells on the same day
                    if (day.buyQuantity > 0 && day.sellQuantity > 0) {
                        const matchedQuantity = Math.min(day.buyQuantity, day.sellQuantity);
                        profitLoss = (avgSellPrice - avgBuyPrice) * matchedQuantity - day.commission;
                    }
                    
                    return {
                        ...day,
                        avgBuyPrice,
                        avgSellPrice,
                        profitLoss
                    };
                });
                
                // Sort by date (newest first)
                dailyResults.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                return dailyResults;
            }
            
            // Render daily P/L table
            renderDailyPLTable(dailyPL) {
                const tableBody = document.getElementById('dailyPLTableBody');
                tableBody.innerHTML = '';
                
                dailyPL.forEach(day => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${this.formatDate(day.date)}</td>
                        <td>${day.symbol}</td>
                        <td>${day.buyQuantity > 0 ? day.buyQuantity.toLocaleString() : '-'}</td>
                        <td>${day.buyQuantity > 0 ? this.formatCurrency(day.avgBuyPrice) : '-'}</td>
                        <td>${day.sellQuantity > 0 ? day.sellQuantity.toLocaleString() : '-'}</td>
                        <td>${day.sellQuantity > 0 ? this.formatCurrency(day.avgSellPrice) : '-'}</td>
                        <td>${this.formatCurrency(day.commission)}</td>
                        <td class="${day.profitLoss >= 0 ? 'profit' : 'loss'}">${this.formatCurrency(day.profitLoss)}</td>
                    `;
                    tableBody.appendChild(row);
                });
            }
            
            // Calculate P/L by symbol
            calculateSymbolProfitLoss() {
                const symbolPL = {};
                
                // Initialize with all symbols
                const symbols = [...new Set(this.trades.map(t => t.symbol))];
                symbols.forEach(symbol => {
                    symbolPL[symbol] = {
                        symbol,
                        buyQuantity: 0,
                        buyValue: 0,
                        sellQuantity: 0,
                        sellValue: 0,
                        commission: 0,
                        openPositionQuantity: 0,
                        profitLoss: 0
                    };
                });
                
                // Process all trades
                this.trades.forEach(trade => {
                    const symbol = trade.symbol;
                    
                    if (trade.side === 'Buy') {
                        symbolPL[symbol].buyQuantity += trade.quantity;
                        symbolPL[symbol].buyValue += trade.quantity * trade.price;
                        symbolPL[symbol].openPositionQuantity += trade.quantity;
                    } else if (trade.side === 'Sell') {
                        symbolPL[symbol].sellQuantity += trade.quantity;
                        symbolPL[symbol].sellValue += trade.quantity * trade.price;
                        symbolPL[symbol].openPositionQuantity -= trade.quantity;
                    }
                    
                    symbolPL[symbol].commission += trade.commission;
                });
                
                // Calculate realized P/L for each symbol
                Object.values(symbolPL).forEach(symbol => {
                    // If we've sold any shares
                    if (symbol.sellQuantity > 0) {
                        const closedPositionQuantity = Math.min(symbol.buyQuantity, symbol.sellQuantity);
                        const avgBuyPrice = symbol.buyQuantity > 0 ? symbol.buyValue / symbol.buyQuantity : 0;
                        const avgSellPrice = symbol.sellQuantity > 0 ? symbol.sellValue / symbol.sellQuantity : 0;
                        
                        symbol.profitLoss = (avgSellPrice - avgBuyPrice) * closedPositionQuantity - symbol.commission;
                    } else {
                        symbol.profitLoss = -symbol.commission;
                    }
                });
                
                // Sort by profit/loss (highest first)
                const result = Object.values(symbolPL).sort((a, b) => b.profitLoss - a.profitLoss);
                
                // Calculate total P/L
                const totalPL = result.reduce((sum, symbol) => sum + symbol.profitLoss, 0);
                
                return {
                    symbols: result,
                    totalPL
                };
            }
            
            // Render symbol P/L table
            renderSymbolPLTable(symbols) {
                const tableBody = document.getElementById('symbolPLTableBody');
                tableBody.innerHTML = '';
                
                symbols.forEach(symbol => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${symbol.symbol}</td>
                        <td>${symbol.buyQuantity.toLocaleString()}</td>
                        <td>${symbol.buyQuantity > 0 ? this.formatCurrency(symbol.buyValue / symbol.buyQuantity) : '-'}</td>
                        <td>${symbol.sellQuantity.toLocaleString()}</td>
                        <td>${symbol.sellQuantity > 0 ? this.formatCurrency(symbol.sellValue / symbol.sellQuantity) : '-'}</td>
                        <td>${symbol.openPositionQuantity.toLocaleString()}</td>
                        <td>${this.formatCurrency(symbol.commission)}</td>
                        <td class="${symbol.profitLoss >= 0 ? 'profit' : 'loss'}">${this.formatCurrency(symbol.profitLoss)}</td>
                    `;
                    tableBody.appendChild(row);
                });
            }
            
            renderCharts() {
                // Destroy existing charts
                if (this.charts.symbols) {
                    this.charts.symbols.destroy();
                }
                
                if (this.charts.volume) {
                    this.charts.volume.destroy();
                }
                
                // Skip if no trades
                if (this.trades.length === 0) {
                    return;
                }
                
                // Prepare data for symbol chart
                const symbolData = this.prepareSymbolChartData();
                const volumeData = this.prepareVolumeChartData();
                
                // Render symbols chart
                this.renderSymbolsChart(symbolData);
                
                // Render volume chart
                this.renderVolumeChart(volumeData);
            }
            
            prepareSymbolChartData() {
                // Count trades by symbol
                const symbolCounts = {};
                
                this.trades.forEach(trade => {
                    if (!symbolCounts[trade.symbol]) {
                        symbolCounts[trade.symbol] = 0;
                    }
                    symbolCounts[trade.symbol]++;
                });
                
                // Sort by count and take top 10
                const sortedSymbols = Object.entries(symbolCounts)
                    .sort(([, a], [, b]) => b - a)
                    .slice(0, 10);
                
                // Format for chart
                return {
                    labels: sortedSymbols.map(([symbol]) => symbol),
                    data: sortedSymbols.map(([, count]) => count)
                };
            }
            
            prepareVolumeChartData() {
                // Group trades by month
                const monthlyVolume = {};
                
                this.trades.forEach(trade => {
                    const tradeDate = new Date(trade.date);
                    const month = `${tradeDate.getFullYear()}-${(tradeDate.getMonth() + 1).toString().padStart(2, '0')}`;
                    
                    if (!monthlyVolume[month]) {
                        monthlyVolume[month] = 0;
                    }
                    
                    monthlyVolume[month] += trade.quantity * trade.price;
                });
                
                // Sort by month
                const sortedMonths = Object.entries(monthlyVolume)
                    .sort(([a], [b]) => a.localeCompare(b));
                
                // Format for chart
                return {
                    labels: sortedMonths.map(([month]) => {
                        const [year, m] = month.split('-');
                        const monthName = new Date(year, parseInt(m) - 1, 1).toLocaleString('default', { month: 'short' });
                        return `${monthName} ${year}`;
                    }),
                    data: sortedMonths.map(([, volume]) => volume)
                };
            }
            
            renderSymbolsChart(data) {
                const ctx = document.getElementById('symbolsChart').getContext('2d');
                
                this.charts.symbols = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            label: 'Number of Trades',
                            data: data.data,
                            backgroundColor: 'rgba(42, 82, 190, 0.6)',
                            borderColor: 'rgba(42, 82, 190, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            }
            
            renderVolumeChart(data) {
                const ctx = document.getElementById('volumeChart').getContext('2d');
                
                this.charts.volume = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            label: 'Trading Volume',
                            data: data.data,
                            backgroundColor: 'rgba(42, 82, 190, 0.1)',
                            borderColor: 'rgba(42, 82, 190, 1)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: (value) => {
                                        return this.formatCurrency(value, true);
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // UTILITY FUNCTIONS
            
            formatCurrency(amount, compact = false) {
                const formatter = new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: this.settings.currencyFormat,
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                    notation: compact ? 'compact' : 'standard'
                });
                
                return formatter.format(amount);
            }
            
            formatDate(dateString) {
                if (!dateString) return '';
                
                let date;
                // Handle DD/MM/YYYY format explicitly
                if (dateString.includes('/')) {
                    const [day, month, year] = dateString.split('/');
                    if (day && month && year) {
                        // Create date using year, month-1 (JS months are 0-indexed), day
                        date = new Date(year, parseInt(month) - 1, day);
                    } else {
                        date = new Date(dateString);
                    }
                } else {
                    date = new Date(dateString);
                }
                
                // Check if date is valid
                if (isNaN(date.getTime())) {
                    return dateString; // Return original if parsing failed
                }
                
                switch (this.settings.dateFormat) {
                    case 'MM/DD/YYYY':
                        return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}/${date.getFullYear()}`;
                    case 'DD/MM/YYYY':
                        return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
                    case 'YYYY-MM-DD':
                        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
                    default:
                        return dateString;
                }
            }
            
            showAlert(message, type) {
                const alertArea = document.getElementById('alertArea');
                
                // Create alert element
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade show`;
                alert.role = 'alert';
                
                alert.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                // Add to alert area
                alertArea.appendChild(alert);
                
                // Auto dismiss after 5 seconds
                setTimeout(() => {
                    alert.classList.remove('show');
                    setTimeout(() => {
                        alertArea.removeChild(alert);
                    }, 150);
                }, 5000);
            }
            
            exportTrades() {
                if (this.trades.length === 0) {
                    this.showAlert('No trades to export', 'warning');
                    return;
                }
// Convert trades to CSV
                const fields = [
                    'id', 'date', 'symbol', 'side', 'quantity', 
                    'price', 'commission', 'orderNumber', 'notes',
                    'linkedTradeIds'
                ];
                
                const csv = [
                    fields.join(','),
                    ...this.trades.map(trade => 
                        fields.map(field => {
                            // Escape quotes and commas
                            let value = trade[field] || '';
                            
                            // Handle linkedTradeIds array
                            if (field === 'linkedTradeIds' && Array.isArray(value)) {
                                value = JSON.stringify(value);
                            }
                            
                            if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                                value = `"${value.replace(/"/g, '""')}"`;
                            }
                            return value;
                        }).join(',')
                    )
                ].join('\n');
                
                // Create file and trigger download
                const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                
                link.href = URL.createObjectURL(blob);
                link.download = `trade_journal_export_${new Date().toISOString().slice(0, 10)}.csv`;
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                this.showAlert('Trades exported successfully', 'success');
            }
            
            clearAllData() {
                // Clear trades
                this.trades = [];
                this.saveTrades();
                
                // Reset charts
                if (this.charts.symbols) {
                    this.charts.symbols.destroy();
                    this.charts.symbols = null;
                }
                
                if (this.charts.volume) {
                    this.charts.volume.destroy();
                    this.charts.volume = null;
                }
                
                // Update UI
                this.updateUI();
                
                // Show success message
                this.showAlert('All trade data has been cleared', 'success');
            }
        }
    </script>
</body>
</html>
